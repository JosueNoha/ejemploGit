**Ramas**:
- Herramienta de git para tener diferentes flujos de trabajo y luego fucionarlos.
- Las ramas se crean copiando un commit anterior (checkout) para luego generar un nuevo flujo sobre este.
- Fucionar dos ramas (merge) puede generar conflictos: diferencias entre ambos archivos.
- Algunas ramas usuales son:
hotfix: rama de solucion de errores
development: rama de experimentos


Comandos git:
**git init**: crea repositorio en carpeta actual: .git/
**git status**: ver estado del proyecto
**git add** <nombrearchivo> envia archivo a staging (nota: usando . puedes mandar toda la carpeta a staging)
**git rm --cached <nombrearchivo>** remueve el archivo de staging
**git commit -m <mensaje**>: envia el staging a repositorio con el mensaje
**git config**: configuraciones de git
		**-- list:** lista configuraciones basicas de git
			  **--show-origin** : ubicacion de las configuraciones
		**-- global user.name <nombre>** cambiar nombre del usuario
		**-- global user.email <email>** cambiar email del usuario
**git log <nombre archivo>**: historial de commits del archivo

Nota
 - para letras de acceso rapido a un comando
 -- para palabras comando


 Comandos:
git show <archivo>: muestra los ultimos cambios en archivo
git diff <indicador1> <indicador2>: muestra cambios entre los commits indicados; considera indicador2 como el mas reciente

Nota: commit sin mensaje: abre un editor VIM

Comandos:
git reset <indicador> --soft/--hard: regresamos al commit guardado en indicador; soft: solo disco duro, staging se mantiene igual; hard: regresetea todo
git diff: conpara staging con disco duro
git log --stat: vista de cambios especificos en cada commit
git checkout <identificador/rama> <archivo> trae el archivo guardado en identificador o rama a disco duro

git reset HEAD: mueve los archivos staged a unstaged.
a diferencia de git rm --cached no elimina el archivo

Comandos 
git clone url: copia desde un repositorio remoto EL directorio master y el repositorio
git push: Envia nuestro repositorio local el repositorio remoto
git fetch: Trae los cambios del repositorio remoto al local (para actualizar el directorio es necesario hacer un git merge)
git pull: combina las acciones de git fetch u git merge

git commit -a: fuciona los comandos git add y git commit (siempre y cuando existan en el repositorio)
git brach <rama> crea la una nueva rama a partir del commit actual
git checkout <rama> ir a la rama
HEAD apuntuador de la rama actual

git branch: ver las ramas
git merge <rama*> "mensaje": trae los cambios de rama* a rama actual


Solución de conflictos:
Simbolos de conflictos:
<<<<<< HEAD
		conflicto rama actual
========
>>>>>> branch merged
		conflicto rama merged 
VSC: Links de correccion automatica: Accept Current Change Accept Incoming Change Accept Both Changes



GitHub: superservidor de git, interfaz visual de codigos, herramienta colaborativa, repositorio de los programadores.
README.md: Archivo de texto que explica el repositorio (muy buena practica tenerlo)

git remote add origin url: crea un espacio remoto de nuestro proyecto
git remote: muestra los espacios remotos del archivo (origin)
git remote -v (verbal):  muestra los espacios remotos del archivo con su respectiva url y su funcion (fetch/push)

git pull origin master: traer los cambios de espacio remoto al espacio local
git pull origin master --allow-unrelated-histories: permite el git pull a pesar de no tener commits en comun, util sobretodo para el primer pull

git push origin master: enviar los cambios del repositorio local al repositorio remoto
NOTA: antes de hacer un git push es necesario hacer un git pull


Llaves publicas/Llaves privadas o Cifrado asimetrico de un solo camino:
Consite en la creacion de:
Una llave publica: es publica, no importa quien la sepa con ella se cifra los mensajes.
Una llave privada: no debes divulgarla, con ella descifras los mensajes cifrados con la llave publica

Cifrado ssh (basado en llaves publicas/privadas)
Crear llaves:
ssh-keygen -t rsa -b 4096 -C email
passphase: contraseña adicional a tus llaves

Windows/linus:
eval $(ssh-agent -s): evalua si el servidor se llaves ssh esta prendido
ssh-add url_llaveprivada: agregar la llave privada

Mac
eval "$(ssh-agent -s)":  evalua si el servidor se llaves ssh esta prendido
crear/modificar archivo config (sin extension):
Host *
	AddKeysToAgent yes
	UseKeychain yes
	IdentifyFile ulr_llaveprivada
ssh-add -K ulr_llaveprivada


Agregar llave publica a git: settings\ssh and GPG keys\ new SSH key: titulo / llavepublica
git remote set-url origin <urlssh>: cambia la direccion de origin 
Nota: Crea nuevas llaves por cada dispositivo conectado a git hub


Tags:
permiten asignar una etiqueta a los commits mas importantes del proyecto generalmente va.b
git tag -a nombre_tag hash_commit -m "mensaje": crea tag al commit referenciado con un mensaje
git tag: muetra los tags del proyecto
git show-ref --tads: muetra los hash asociados a los tags
git push origin --tags: envia tags al repositorio remoto
git tag -d nombre_tag: elimina nombre_tag del repositorio local
git push origin :refs/tags/nombre_tag: envia cambios de nombre_tag al repositorio remoto (en este caso el borrado)


Otros comandos:
git log --all --graph --decorate --oneline: mustra el arbol de commits de manera grafica y comprimida
alias nombre_alias="comando": asigna nombre_alias a comando