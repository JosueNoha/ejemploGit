**Ramas**:
- Herramienta de git para tener diferentes flujos de trabajo y luego fucionarlos.
- Las ramas se crean copiando un commit anterior (checkout) para luego generar un nuevo flujo sobre este.
- Fucionar dos ramas (merge) puede generar conflictos: diferencias entre ambos archivos.
- Algunas ramas usuales son:
hotfix: rama de solucion de errores
development: rama de experimentos


Comandos git:
**git init**: crea repositorio en carpeta actual: .git/
**git status**: ver estado del proyecto
**git add** <nombrearchivo> envia archivo a staging (nota: usando . puedes mandar toda la carpeta a staging)
**git rm --cached <nombrearchivo>** remueve el archivo de staging
**git commit -m <mensaje**>: envia el staging a repositorio con el mensaje
**git config**: configuraciones de git
		**-- list:** lista configuraciones basicas de git
			  **--show-origin** : ubicacion de las configuraciones
		**-- global user.name <nombre>** cambiar nombre del usuario
		**-- global user.email <email>** cambiar email del usuario
**git log <nombre archivo>**: historial de commits del archivo

Nota
 - para letras de acceso rapido a un comando
 -- para palabras comando


 Comandos:
git show <archivo>: muestra los ultimos cambios en archivo
git diff <indicador1> <indicador2>: muestra cambios entre los commits indicados; considera indicador2 como el mas reciente

Nota: commit sin mensaje: abre un editor VIM

Comandos:
git reset <indicador> --soft/--hard: regresamos al commit guardado en indicador; soft: solo disco duro, staging se mantiene igual; hard: regresetea todo
git diff: conpara staging con disco duro
git log --stat: vista de cambios especificos en cada commit
git checkout <identificador/rama> <archivo> trae el archivo guardado en identificador o rama a disco duro

git reset HEAD: mueve los archivos staged a unstaged.
a diferencia de git rm --cached no elimina el archivo

Comandos 
git clone url: copia desde un repositorio remoto EL directorio master y el repositorio
git push: Envia nuestro repositorio local el repositorio remoto
git fetch: Trae los cambios del repositorio remoto al local (para actualizar el directorio es necesario hacer un git merge)
git pull: combina las acciones de git fetch u git merge

git commit -a: fuciona los comandos git add y git commit (siempre y cuando existan en el repositorio)
git brach <rama> crea la una nueva rama a partir del commit actual
git checkout <rama> ir a la rama
HEAD apuntuador de la rama actual

git branch: ver las ramas
git merge <rama*> "mensaje": trae los cambios de rama* a rama actual


Solución de conflictos:
Simbolos de conflictos:
<<<<<< HEAD
		conflicto rama actual
========
>>>>>> branch merged
		conflicto rama merged 
VSC: Links de correccion automatica: Accept Current Change Accept Incoming Change Accept Both Changes



GitHub: superservidor de git, interfaz visual de codigos, herramienta colaborativa, repositorio de los programadores.
README.md: Archivo de texto que explica el repositorio (muy buena practica tenerlo)

git remote add origin url: crea un espacio remoto de nuestro proyecto
git remote: muestra los espacios remotos del archivo (origin)
git remote -v (verbal):  muestra los espacios remotos del archivo con su respectiva url y su funcion (fetch/push)

git pull origin master: traer los cambios de espacio remoto al espacio local
git pull origin master --allow-unrelated-histories: permite el git pull a pesar de no tener commits en comun, util sobretodo para el primer pull

git push origin master: enviar los cambios del repositorio local al repositorio remoto
NOTA: antes de hacer un git push es necesario hacer un git pull


Llaves publicas/Llaves privadas o Cifrado asimetrico de un solo camino:
Consite en la creacion de:
Una llave publica: es publica, no importa quien la sepa con ella se cifra los mensajes.
Una llave privada: no debes divulgarla, con ella descifras los mensajes cifrados con la llave publica

Cifrado ssh (basado en llaves publicas/privadas)
Crear llaves:
ssh-keygen -t rsa -b 4096 -C email
passphase: contraseña adicional a tus llaves

Windows/linus:
eval $(ssh-agent -s): evalua si el servidor se llaves ssh esta prendido
ssh-add url_llaveprivada: agregar la llave privada

Mac
eval "$(ssh-agent -s)":  evalua si el servidor se llaves ssh esta prendido
crear/modificar archivo config (sin extension):
Host *
	AddKeysToAgent yes
	UseKeychain yes
	IdentifyFile ulr_llaveprivada
ssh-add -K ulr_llaveprivada


Agregar llave publica a git: settings\ssh and GPG keys\ new SSH key: titulo / llavepublica
git remote set-url origin <urlssh>: cambia la direccion de origin 
Nota: Crea nuevas llaves por cada dispositivo conectado a git hub


Tags:
permiten asignar una etiqueta a los commits mas importantes del proyecto generalmente va.b
git tag -a nombre_tag hash_commit -m "mensaje": crea tag al commit referenciado con un mensaje
git tag: muetra los tags del proyecto
git show-ref --tads: muetra los hash asociados a los tags
git push origin --tags: envia tags al repositorio remoto
git tag -d nombre_tag: elimina nombre_tag del repositorio local
git push origin :refs/tags/nombre_tag: envia cambios de nombre_tag al repositorio remoto (en este caso el borrado)


Otros comandos:
git log --all --graph --decorate --oneline: mustra el arbol de commits de manera grafica y comprimida
alias nombre_alias="comando": asigna nombre_alias a comando


Comandos:
git show-branch --all: muestra las ramas que existen y su historia.
gitk: abre un software la historia del proyecto de manera visual
git branch -m nobre_rama nombre_cambio: cambiar el nombre de una rama

Comandos:
git clone url: clonar repositorio remoto a local

Para asignar colaboradores al repositorio
repositorio > settings (del repositorio) > collaborators > Add colaborator → a traves de un correo publico o nobre de usuario en gitHub


Flujo profesional: Cada quien trabaja en su determinado branch y un delegado confirma los cambios al master una vez terminados los camnbios
Nota: gitHub soporta archivos binarios aunque tarda en actualizarlos y no es una buena practica


Normalmente se bloquea la rama master.
Antes de sacar el producto se lo prueba en un servidor de desarrolo o staging 
pull request: estado intermedio antes de enviar el merge: los miembros del equipo revisan los cambios; al aprobarlos se ejecuta el merge
DevObs: administrador de desarrollo

Pull requests
Repostorio virtual > pull request: base master compare to rama_cambios: se pueden agregar: comentarios, reviewers,  
etc (utilidades para DevOps)
Los reviewers pueden: Comentar, aprobar cambios o pedir cambios.
Una vez los reviewers hayan aprobado los cambios se puede hacer el merge, debe haber un encargado para hecer el merge aunque cualquier colaborador puede hacerlo.


Fork: crear una copia del estado actual del proyecto y clonarlo
Pull request de un tercero: a traves del fork gitHub reconoce el base repository/ base branch y el head repository/compare branch
Actualizar el fork desde consola: 
git remote addd upstream url: agrega un nuevo repositorio remoto (apuntador al repositorio original el repositorio otiginal)
Nota: tambien se puede actualizar el fork desde gitHub a traves de un pull request

deployment: agregar el proyecto git al server; no es una buena practica; hay que protejer el .git.
paginas que conectan automatcamente las ramas de gitHub a tus servidores: travis.ci  jenkins (integracion continua/desarrollo continuo)


Los archivos binarios y la informacion que queremos proteger no deben enviarse al repositorio remoto para ello creamos el archivo .gitignore en el root del proyecto con todos los archivos que queremos que git ignore
sintaxis:
* ignorar todos los archivos con una extension ej: *.jpg
! generar exepciones ej: !logo.jpg

readme.md: Descripcion de tu repositorio
md:markdown: lenguaje intermedio de edicion de texto
editor.md: editor online que facilita el uso de md

gitHub pages
pages.github.com: instrucciones para crear tu pagina en gitHub pages
-Crear un repositorio publico con tu nombre de usuario.github.io
-Crear un archivo index.html
-Modificar el source de repositorio > settings > GitHub Pages a master branch

git rebase:
Trae la rama entera y la trae o otra rama como si la rama que se trae no hubiese existido (sin merge); cambia la historia de la rama
Comandos
git rebase rama_cambios (desde la rama a traer los cambios)
git branch -D nombre_rama: elimina la rama
nota: es una mala practica; cambia la historia del branch

git stash:
guarda los cambios de manera temporal y regresa al commit anterior; desde alli puedes moverte entre ramas para recuperar informacion desde esta; tambien puede ser util para hacer experimentos rapidos.
Comandos:
git stash: crea el estash
git stash list: lista de stash creados
git stash drop: elimina el stash
git stash pop: abre el stash en la rama actual
git stash branch nombre_rama: guarda el stash en nobre_rama
Nota: recuerda regresar a la rama original antes de quitar el stash

git clean: quitar archivos no trackeados
git clean --dry-run: prueba en seco revisa los archicos antes de borrarlos
git clean -f: borra los archivos que pasan por prueba en seco
No borra: carpetas y archivos ignorados por .gitignore

cherry pick: trae un commit de otra ramma a la rama actual
sintaxis:
git cherry-pick hash_commit
Nota:
Es una mala practica: reconstruyes la historia


git amend: modifica un commit en caso de error
sintaxis:
git add archivo_cambiado: es importante cuando haces amend
git commit --amend: pega los cambios hechos al commit anterior

git reflog: historial de todo el proyecto: hash/head
git reset --hard hash/head: reseteamos hasta el hash o head indicado
Nota: todo queda guardado en reflog

Buscadores:
git grep palabra: busca palabra en el repositorio
	     -n palabra: busca la palabra y muestra la linea
git log -s palabra: busca palabra en los commits

Comandos adicionales:
git shortlog commits de cada mienbro del equipo
git shortlog -sn numero de commits por miembro
git shortlog -sn --all incluye los commits borrados
git shortlog -sn --all --no-merges excluye los merges
git blame archivo muestra quien modifico el archivo (por lineas)
git blame archivo -c: indenta mejor la informacion
git blame archivo -Li,f: muestra solo las lineas que estan entre i-f
git branch -r: ver ramas remotas
git branch -a: ver todas las ramas (remotos/locales)

Utilidades gitHub:
Panel insights:
pulse: merge/pull request/ issues/historia de contribuciones
contributors: contribuidores del proyecto
comunity: readme, codigo de conducta, licencias, etc
trafic: trafico del proyecto
commits: historia de commits
code frecuency: codigo añadido/borrado
dependenci graph: uso de otras librerias
alerts: alertas de gitHub
network: historia de contribucion de los colaboradores
forks: muestra los forks del proyectos